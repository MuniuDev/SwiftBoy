//
//  GameBoyCPUOpcodes.swift
//  SwiftEmu
//
//  Created by Michal Majczak on 13.09.2015.
//  Copyright (c) 2015 Michal Majczak. All rights reserved.
//

import Foundation

struct OpCode {
    var name: String
    var operandSize: Int
    var instruction: ((cpu: GameBoyCPU)->Void)?
    init(_ name: String, _ size: Int, _ instr: ((cpu: GameBoyCPU)->Void)? = nil) {
        self.name = name
        operandSize = size
        instruction = instr
    }
    
}

func generateOpCodeTable() -> [OpCode] {
    var table = [
        //0x0n
        OpCode("NOP",0,nil),
        OpCode("LD BC,nn",16,nil),
        OpCode("LD (BC),A",0,nil),
        OpCode("INC BC",0,nil),
        OpCode("INC B",0,nil),
        OpCode("DEC B",0,nil),
        OpCode("LD B,n",0,nil),
        OpCode("RLC A",0,nil),
        OpCode("LD (nn),SP",0,nil),
        OpCode("ADD HL,BC",0,nil),
        OpCode("LD A,(BC)",0,nil),
        OpCode("DEC BC",0,nil),
        OpCode("INC C",0,nil),
        OpCode("DEC C",0,nil),
        OpCode("LD C,n",0,nil),
        OpCode("RRC A",0,nil),
        //0x1n
        OpCode("STOP",0,nil),
        OpCode("LD DE,nn",0,nil),
        OpCode("LD (DE),A",0,nil),
        OpCode("INC DE",0,nil),
        OpCode("INC D",0,nil),
        OpCode("DEC D",0,nil),
        OpCode("LD D,n",0,nil),
        OpCode("RL A",0,nil),
        OpCode("JR n",0,nil),
        OpCode("ADD HL,DE",0,nil),
        OpCode("LD A,(DE)",0,nil),
        OpCode("DEC DE",0,nil),
        OpCode("INC E",0,nil),
        OpCode("DEC E",0,nil),
        OpCode("LD E,n",0,nil),
        OpCode("RR A",0,nil),
        //0x2n
        OpCode("JR NZ,n",0,nil),
        OpCode("LD HL,nn",0,nil),
        OpCode("LDI (HL),A",0,nil),
        OpCode("INC HL",0,nil),
        OpCode("INC H",0,nil),
        OpCode("DEC H",0,nil),
        OpCode("LD H,n",0,nil),
        OpCode("DAA",0,nil),
        OpCode("JR Z,n",0,nil),
        OpCode("ADD HL,HL",0,nil),
        OpCode("LDI A,(HL)",0,nil),
        OpCode("DEC HL",0,nil),
        OpCode("INC L",0,nil),
        OpCode("DEC L",0,nil),
        OpCode("LD L,n",0,nil),
        OpCode("CPL",0,nil),
        //0x3n
        OpCode("JR NC,n",0,nil),
        OpCode("LD SP,nn",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil),
        OpCode("NOP",0,nil)]
    return table
}

//instructions
func NOP(cpu: GameBoyCPU){}
func LD_BC(cpu: GameBoyCPU){} //load 16bit to BC
func LD_aBC_A(cpu: GameBoyCPU){} //load A into address pointed by BC
func INC_BC(cpu: GameBoyCPU){}
func INC_B(cpu: GameBoyCPU){}
func LD_SP(cpu: GameBoyCPU){}